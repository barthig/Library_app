<?php

namespace App\Repositories;

use App\Models\Loan;
use App\Repositories\Interfaces\LoanRepositoryInterface;
use PDO;
use InvalidArgumentException;

class LoanRepository extends Repository implements LoanRepositoryInterface
{
    /**
     * Finds a loan by its ID.
     *
     * @param int $id
     * @return Loan|null
     */
    public function findById($id)
    {
        $stmt = $this->db->prepare('SELECT * FROM loans WHERE id = :id');
        $stmt->execute(['id' => $id]);
        $data = $stmt->fetch(PDO::FETCH_ASSOC);

        return $data ? new Loan($data) : null;
    }

    /**
     * Returns all loans ordered descending by loan date.
     *
     * @return Loan[]
     */
    public function findAll()
    {
        $stmt = $this->db->query('SELECT * FROM loans ORDER BY loan_date DESC');
        $loans = [];

        while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
            $loans[] = new Loan($row);
        }

        return $loans;
    }

    /**
     * Returns the loan history of a given member.
     *
     * @param int $memberId
     * @return Loan[]
     */
    public function findByMember($memberId)
    {
        $stmt = $this->db->prepare(
            'SELECT * FROM loans WHERE member_id = :member_id ORDER BY loan_date DESC'
        );
        $stmt->execute(['member_id' => $memberId]);
        $history = [];

        while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
            $history[] = new Loan($row);
        }

        return $history;
    }

    /**
     * Saves a new loan or updates an existing one.
     *
     * @param mixed $entity
     * @return void
     * @throws InvalidArgumentException
     */
    public function save($entity)
    {
        if (! $entity instanceof Loan) {
            throw new InvalidArgumentException(
                'LoanRepository::save expects an instance of App\\Models\\Loan.'
            );
        }

        // If the Loan object has an ID, perform an update
        if ($entity->getId() !== null) {
            return $this->update($entity);
        }

        // Otherwise insert a new loan
        $stmt = $this->db->prepare(
            'INSERT INTO loans (
                member_id,
                book_id,
                loan_date,
                due_date,
                fine_amount
            ) VALUES (
                :member_id,
                :book_id,
                :loan_date,
                :due_date,
                :fine_amount
            )'
        );
        $stmt->execute([
            'member_id'   => $entity->getMemberId(),
            'book_id'     => $entity->getBookId(),
            'loan_date'   => $entity->getLoanDate(),
            'due_date'    => $entity->getDueDate(),
            'fine_amount' => $entity->getFineAmount(), // usually zero when borrowing
        ]);

        // Set the ID generated by the database (if method setId exists)
        if (method_exists($entity, 'setId')) {
            $entity->setId((int) $this->db->lastInsertId());
        }
    }

    /**
     * Updates a loan â€“ primarily when returning a book.
     * Saves return_date and fine_amount.
     *
     * @param mixed $entity
     * @return void
     * @throws InvalidArgumentException
     */
    public function update($entity)
    {
        if (! $entity instanceof Loan) {
            throw new InvalidArgumentException(
                'LoanRepository::update expects an instance of App\\Models\\Loan.'
            );
        }

        if ($entity->getId() === null) {
            throw new InvalidArgumentException(
                'LoanRepository::update cannot update a Loan object without an ID.'
            );
        }

        $stmt = $this->db->prepare(
            'UPDATE loans
             SET
                 due_date    = :due_date,
                 return_date = :return_date,
                 fine_amount = :fine_amount
             WHERE id = :id'
        );
        $stmt->execute([
            'id'          => $entity->getId(),
            'due_date'    => $entity->getDueDate(),
            'return_date' => $entity->getReturnDate(),
            'fine_amount' => $entity->getFineAmount(),
        ]);
    }

    /**
     * Deletes a loan with the given ID.
     *
     * @param int $id
     * @return void
     */
    public function delete($id)
    {
        $stmt = $this->db->prepare('DELETE FROM loans WHERE id = :id');
        $stmt->execute(['id' => $id]);
    }
}
